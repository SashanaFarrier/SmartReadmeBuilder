@using SmartReadmeBuilder.ViewModels;
@model LogViewModel;

@{
    ViewData["Title"] = "Logs";
}

@{

    if (TempData["DeleteSuccess"] != null)
    {
        var timeDeleted = DateTime.UtcNow - (DateTime)TempData["DeletedAt"];

        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">@TempData["DeleteSuccess"]</strong>
                    <small>@((int)timeDeleted.TotalSeconds) seconds ago</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>

            </div>
        </div>
    }

    if (TempData["PushSuccess"] != null)
    {
        var timestamp = DateTime.UtcNow;
        var timeSpan = DateTime.UtcNow - timestamp;
        int totalSeconds = (int)timeSpan.TotalSeconds;

        <div class="toast position-fixed bottom-0 end-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
            <div class="toast-header d-flex justify-content-between">
                <small>@totalSeconds seconds ago</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <strong class="me-auto">@TempData["PushSuccess"]</strong>
            </div>
        </div>
    }
    else if (TempData["PushError"] != null)
    {
        var time = DateTime.UtcNow;
        <div class="toast bg-danger position-fixed top-0 end-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
            <div class="toast-header d-flex justify-content-between">
                <small>@((int)time.Minute) minutes ago</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <strong class="me-auto">@TempData["PushError"]</strong>
            </div>
        </div>
    }

}

<section id="log" class="container-fluid">
    @if (ViewBag.Log.Prompts.Count == 0)
    {
        <div class="d-flex justify-content-center ">
            <div class="alert alert-info" role="alert">
                <p>No prompts found. Please create a prompt to generate a README.</p>
            </div>
        </div>
    }
    <div class="mt-3 h-100">
        <div class="d-flex justify-content-between gap-5 flex-column flex-lg-row">

            @if (ViewBag.Log.Prompts != null && ViewBag.Log.Prompts.Count > 0)
            {
                <sidebar id="prompt-history" class="col-lg-4">
                    <h3>Prompt history</h3>
                    <ul class="list-group">
                        @foreach (var prompt in (List<Prompt>)ViewBag.Log.Prompts)
                        {
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between gap-2">
                                    <div class="prompt">
                                        <span class="fw-bold d-inline-block mb-2 | prompt-timestamp">@prompt.CreatedOn.ToString("g")</span>
                                        <p class="mt-3">@prompt.Text</p>
                                    </div>
                                    <div class="btn-group align-items-start gap-2">
                                        <form asp-controller="Log" asp-action="EditPrompt" asp-route-id="@prompt.Id" method="get" class="float-end">
                                            <input type="hidden" name="id" value="@prompt.Id" />
                                            <button type="submit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                        </form>
                                        <!-- Button trigger modal -->
                                        <button type="button" data-bs-toggle="modal" data-bs-target="#deletePrompt-@prompt.Id">
                                            <i class="bi bi-trash3"></i>
                                        </button>
                                    </div>
                                </div>
                                <form asp-controller="Log" asp-action="RegenerateMarkdown">
                                    <input type="hidden" name="id" value="@prompt.Id" />
                                    <button class="btn btn-secondary btn-sm btn-outline">Regenerate markdown</button>
                                </form>
                                <!-- Modal -->
                                <div class="modal fade" id="deletePrompt-@prompt.Id" tabindex="-1" aria-labelledby="deletePrompt-@prompt.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h4 class="modal-title" id="deletePrompt-@prompt.Id">Delete Prompt - @prompt.Text.Substring(0, 15)...</h4>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <p>Are you sure you want to delete this prompt? This cannot be undone.</p>
                                            </div>
                                            <div class="modal-footer d-flex justify-content-between">
                                                <button type="button" class="text-black btn btn-outline bg-transparent" data-bs-dismiss="modal">Close</button>
                                                <form asp-controller="Log" asp-action="DeletePrompt" method="post" class="float-end">
                                                    <input type="hidden" name="id" value="@prompt.Id" />
                                                    <button type="submit" class="btn btn-danger">Confirm</button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </sidebar>
                <div id="markdown-history">
                    <ul>
                        @foreach (var markdown in (List<Markdown>)ViewBag.Log.Markdowns)
                        {
                            var modalId = $"githubModal-{markdown.Id}";

                            <li>
                                <div class="d-flex justify-content-between align-items-between p-3 flex-column flex-md-row gap-md-2 | list-item-header">
                                    <h3>Your ReadME is ready</h3>
                                    <div class="btn-group align-items-center gap-2 mt-2 mt-md-0">
                                        <form asp-controller="Markdown" asp-action="Edit" asp-route-id="@markdown.Id" method="get">
                                            <input type="hidden" name="Markdowntext" value="@markdown.Id" />
                                            <button>
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                        </form>
                                        <button id="@markdown.Id" class="copy-btn"><i class="bi bi-clipboard"></i></button>
                                        <!-- Button trigger modal -->
                                        <button class="btn btn-secondary btn-sm btn-outline ms-auto | pushBtn" data-bs-toggle="modal" data-bs-target="#@modalId">Push to Github</button>
                                    </div>
                                </div>
                                <div class="markdown">
                                    <pre>@markdown.Text</pre>
                                </div>

                                <div class="modal fade" id="@modalId" tabindex="-1" aria-labelledby="@modalId" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="githubModalLabel-@markdown.Id">Push ReadME to GitHub</h1>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                @await Html.PartialAsync("_GithubCredentials", new GitHubInfo() { MarkdownId = @markdown.Id })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

            }
        </div>

    </div>
</section>
@section Scripts {
    <script>
        window.addEventListener('DOMContentLoaded', (event) => {
            var toastEl = document.querySelector('.toast');
            if (toastEl) {
                var toast = new bootstrap.Toast(toastEl);
                toast.show();
            }
        });

        const markdownHistory = document.getElementById("markdown-history");

        markdownHistory.addEventListener("click", (e) => {
            if(e.target.closest(".copy-btn")) {
                const markdowm = e.target.parentElement.closest("li").querySelector(".markdown pre");
                copyMarkdownTextToClipboard(markdowm.innerText)
            }
        });

        async function copyMarkdownTextToClipboard(markdown) {
          try {
            await navigator.clipboard.writeText(markdown);
            alert("Markdown copied to clipboard!");
          } catch (error) {
            console.error(error.message);
            alert("Failed to copy markdown to clipboard. Please try again.");
          }
        }

        //tooltip
         const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
         const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

    </script>

}
